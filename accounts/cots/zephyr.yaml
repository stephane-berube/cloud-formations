AWSTemplateFormatVersion: "2010-09-09"

Description: Zephyr

Parameters:
  # ===== General Section =====
  S3Templates:
    Type: AWS::SSM::Parameter::Value<String>
    Default: S3Templates
  VPCName:
    Type: String
    Default: ised
  VPCId:
    Type: AWS::EC2::VPC::Id
  SubnetId:
    Type: AWS::EC2::Subnet::Id
  ISEDProjectId:
    Type: String
    Default: ccots-zephyr
  CostCentre:
    Type: String
    Default: cio-rdad
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
  EC2Ami:
    Type: String
    Description: Specify if restoring from Ami, otherwise leave blank

  # ===== EBS Volumes =====
  EC2RootVolumeSize:
    Type: String
    Default: 8
  EC2AppVolumeSize:
    Type: String
    Default: 2
  EC2AppVolumeMount:
    Type: String
    Default: /dev/sdg
  EC2DataVolumeSize:
    Type: String
    Default: 100
  EC2DataVolumeMount:
    Type: String
    Default: /dev/sdf

  # ===== RDS Section =====
  RDSStorage:
    Type: String
    Default: 20
  RDSSize:
    Type: String
    Default: db.t3.medium
  RDSEngine:
    Type: String
    Default: mysql
  RDSEngineVersion:
    Type: String
    Default: "5.7.30"
  RDSSnapshot:
    Description: Specify if restoring from snapshot
    Type: String
  RDSMasterUserPassword:
    NoEcho: true
    Type: String
  DBName:
    Type: String
    Default: zephyr
  AllowMajorVersionUpgrade:
    Type: String
    Default: False
    AllowedValues:
      - True
      - False

Conditions:
  IsProd: !Equals [ !Ref Environment, prod ]
  IsEC2Restore: !Not [ !Equals [ !Ref EC2Ami, "" ] ]
  IsRDSRestore: !Not [ !Equals [ !Ref RDSSnapshot, "" ] ]

Resources:

  EC2:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Join [ '', [!Ref S3Templates, "ec2.yaml" ]]
      Parameters:
        # ===== General Section =====
        ISEDProjectId: !Ref ISEDProjectId
        CostCentre: !Ref CostCentre
        Environment: !Ref Environment
        VPCId: !Ref VPCId
        SubnetId: !Ref SubnetId
        Schedule: !If [ IsProd, 24-7, office-hours ]

        # ===== EC2 Section =====
        EC2OS: Ubuntu-Server-18.04-LTS
        EC2Size: t3.xlarge
        EC2Ami: !Ref EC2Ami
        EC2RootVolumeSize: !If [ IsEC2Restore, "", !Ref EC2RootVolumeSize ]
        EBSVolume1Size: !If [ IsEC2Restore, "", !Ref EC2AppVolumeSize ]
        EBSVolume1Mount: !If [ IsEC2Restore, "",!Ref EC2AppVolumeMount ]
        EBSVolume2Size: !If [ IsEC2Restore, "", !Ref EC2DataVolumeSize ]
        EBSVolume2Mount: !If [ IsEC2Restore, "", !Ref EC2DataVolumeMount ]
        EC2Options: !If [ IsEC2Restore, "Restore", "Create" ]
        UserData: ""

  # Allow incoming connection on Confluence's listening port from ALB VPC
  IngressZephyr:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt EC2.Outputs.EC2SecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: !If [ IsProd, 100.96.199.0/26, 100.96.193.64/26 ]

  RDS:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Join [ '', [!Ref S3Templates, "rds.yaml" ]]
      Parameters:
        # ===== General Section =====
        ISEDProjectId: !Ref ISEDProjectId
        CostCentre: !Ref CostCentre
        Environment: !Ref Environment
        VPCId: !Ref VPCId
        Schedule: !If [ IsProd, 24-7, office-hours ]
        VPCName: !Ref VPCName
        # ===== RDS Section =====
        DBName: !Ref DBName
        RDSEngine: !Ref RDSEngine
        RDSEngineVersion: !Ref RDSEngineVersion
        AllowMajorVersionUpgrade: !Ref AllowMajorVersionUpgrade
        RDSStorage: !Ref RDSStorage
        RDSSize: !Ref RDSSize
        RDSMaxStorage: ""
        RDSSnapshot: !Ref RDSSnapshot
        RDSBackupRetentionPeriod: !If [ IsProd, 30, 7 ]
        RDSMasterUserPassword: !Ref RDSMasterUserPassword
        Ec2IpAddress: !GetAtt EC2.Outputs.EC2PrivateIp
        RDSOptions: !If [ IsRDSRestore, "Restore", "Create" ]
        OCPIpAddress: ""

  # TODO: Update rds.yaml so we can provide our own DBParameterGroup
  DBParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Description: "max_connections to 500"
      Family: mysql5.7
      Parameters:
        max_connections: "500"

  ElasticSearch:
    Type: AWS::Elasticsearch::Domain
    Properties:
      # If you specify a name, you cannot perform updates that require replacement of this resource
      # DomainName: zephyr
      ElasticsearchVersion: "6.8"
      ElasticsearchClusterConfig:
        InstanceCount: 1
        InstanceType: r5.large.elasticsearch
      DomainEndpointOptions:
        EnforceHTTPS: True
        TLSSecurityPolicy: Policy-Min-TLS-1-2-2019-07
      EBSOptions:
        EBSEnabled: True
        VolumeSize: 10
        VolumeType: gp2
      EncryptionAtRestOptions:
        Enabled: True
        KmsKeyId: c0599e59-952e-4e90-a7f0-229fad69ca25
      NodeToNodeEncryptionOptions:
        Enabled: True
      VPCOptions:
        SecurityGroupIds:
          - !Ref ElasticSearchSG
        SubnetIds:
          - !Ref SubnetId

  ElasticSearchSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPCId
      GroupDescription: "Zephyr"
      Tags:
        - Key: Name
          Value: !Join ['-', ["sg-es", !Ref "AWS::AccountId", !Ref ISEDProjectId ] ]
        - Key: ised-cost-centre
          Value: !Ref CostCentre
        - Key: ised-project-id
          Value: !Ref ISEDProjectId
        - Key: ised-environment
          Value: !Ref Environment

  IngressESHTTPS:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow incoming connections from EC2 to ElasticSearch on port 443
      GroupId: !Ref ElasticSearchSG
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: !Join [ '/', [ !GetAtt EC2.Outputs.EC2PrivateIp, "32" ] ]

  # TODO: Figure out how to have Zephyr connect to ES over HTTPS, then remove
  #       the following SecurityGroupIngress
  IngressESHTTP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow incoming connections from EC2 to ElasticSearch on port 80
      GroupId: !Ref ElasticSearchSG
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: !Join [ '/', [ !GetAtt EC2.Outputs.EC2PrivateIp, "32" ] ]